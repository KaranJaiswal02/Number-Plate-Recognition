import cv2
import pytesseract
import sqlite3
import datetime
from tkinter import Tk, filedialog, Label, Button, messagebox, Frame
from PIL import Image, ImageTk

pytesseract.pytesseract.tesseract_cmd = 'C:/Program Files/Tesseract-OCR/tesseract'

class LicensePlateDetector:
    def __init__(self):
        self.root = Tk()
        self.root.title("License Plate Detector")
        self.root.geometry("1000x700")  # Increased window size for parking slots display

        self.label = Label(self.root, text="Select an image file:")
        self.label.pack()

        self.button = Button(self.root, text="Browse", command=self.select_image)
        self.button.pack()

        self.image_frame = Frame(self.root)
        self.image_frame.pack()

        self.parking_slots_frame = Frame(self.root)
        self.parking_slots_frame.pack()

        self.display_parking_slots()  # Display parking slots on startup

        self.root.mainloop()

    def select_image(self):
        self.image_path = filedialog.askopenfilename(title="Select Image File", filetypes=[("Image Files", ".jpg .jpeg .png .bmp")])
        if self.image_path:
            self.process_image()

    def process_image(self):
        # Connect to SQLite database
        conn = sqlite3.connect('car_database.db')
        c = conn.cursor()

        # Create tables if they don't exist
        c.execute('''CREATE TABLE IF NOT EXISTS cars
                     (license_plate text, timestamp text, parking_slot integer)''')

        c.execute('''CREATE TABLE IF NOT EXISTS parking_slots
                     (slot_number integer PRIMARY KEY, occupied boolean)''')

        # Initialize parking slots if empty
        c.execute('SELECT COUNT(*) FROM parking_slots')
        if c.fetchone()[0] == 0:
            for i in range(1, 21):  # Example: 20 parking slots
                c.execute("INSERT INTO parking_slots (slot_number, occupied) VALUES (?, ?)", (i, False))
            conn.commit()

        # Read the image file
        image = cv2.imread(self.image_path)

        # Convert to Grayscale Image
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # Canny Edge Detection
        canny_edge = cv2.Canny(gray_image, 170, 200)

        # Find contours based on Edges
        contours, new = cv2.findContours(canny_edge.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        contours = sorted(contours, key=cv2.contourArea, reverse=True)[:30]

        # Initialize license Plate contour and x,y,w,h coordinates
        contour_with_license_plate = None
        license_plate = None
        x = None
        y = None
        w = None
        h = None

        # Find the contour with 4 potential corners and create ROI around it
        for contour in contours:
            perimeter = cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, 0.01 * perimeter, True)
            if len(approx) == 4:  # see whether it is a Rect
                contour_with_license_plate = approx
                x, y, w, h = cv2.boundingRect(contour)
                license_plate = gray_image[y:y + h, x:x + w]
                break
        if license_plate is not None:
            (thresh, license_plate) = cv2.threshold(license_plate, 127, 255, cv2.THRESH_BINARY)

            # Removing Noise from the detected image
            license_plate = cv2.bilateralFilter(license_plate, 11, 17, 17)
            (thresh, license_plate) = cv2.threshold(license_plate, 150, 180, cv2.THRESH_BINARY)

            # Text Recognition
            text = pytesseract.image_to_string(license_plate).strip()

            # Draw License Plate and write the Text
            image = cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 3)
            image = cv2.putText(image, text, (x - 100, y - 20), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

            print("License Plate :", text)

            # Get current timestamp
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Check if the license plate is already in the database
            c.execute("SELECT parking_slot FROM cars WHERE license_plate = ? ORDER BY timestamp DESC LIMIT 1", (text,))
            existing_record = c.fetchone()

            if existing_record:
                # Car is exiting, free up the parking slot
                slot_number = existing_record[0]
                c.execute("UPDATE parking_slots SET occupied = 0 WHERE slot_number = ?", (slot_number,))
                c.execute("DELETE FROM cars WHERE license_plate = ? AND parking_slot = ?", (text, slot_number))
                conn.commit()
                parking_info = f"Parking Slot {slot_number} is now available. Car has exited."
            else:
                # Car is entering, assign a new parking slot
                c.execute("SELECT slot_number FROM parking_slots WHERE occupied = 0 LIMIT 1")
                available_slot = c.fetchone()

                if available_slot:
                    slot_number = available_slot[0]
                    # Mark slot as occupied
                    c.execute("UPDATE parking_slots SET occupied = 1 WHERE slot_number = ?", (slot_number,))
                    c.execute("INSERT INTO cars (license_plate, timestamp, parking_slot) VALUES (?, ?, ?)", (text, timestamp, slot_number))
                    conn.commit()
                    parking_info = f"Parking Slot Assigned: {slot_number}"
                else:
                    parking_info = "Parking is full"
                    # Optionally, you can still insert the record with NULL or a special value for parking_slot
                    c.execute("INSERT INTO cars (license_plate, timestamp, parking_slot) VALUES (?, ?, ?)", (text, timestamp, None))
                    conn.commit()

            # Display output in the same window
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            image = Image.fromarray(image)
            image = ImageTk.PhotoImage(image)
            label = Label(self.image_frame, image=image)
            label.image = image
            label.pack()

            # Show parking information
            messagebox.showinfo("Parking Information", f"License plate detected and saved to database!\n{parking_info}")

            # Display parking slots availability
            self.display_parking_slots()

            # Ask user for the next action
            user_response = messagebox.askyesno("Continue?", "Do you want to scan another image?")
            if user_response:
                # Clear previous image
                for widget in self.image_frame.winfo_children():
                    widget.destroy()
                self.select_image()
            else:
                self.root.quit()

            # Close SQLite connection
            conn.close()

    def display_parking_slots(self):
        # Connect to SQLite database
        conn = sqlite3.connect('car_database.db')
        c = conn.cursor()

        # Clear previous parking slots
        for widget in self.parking_slots_frame.winfo_children():
            widget.destroy()

        # Retrieve parking slots information
        c.execute("SELECT slot_number, occupied FROM parking_slots")
        slots = c.fetchall()

        # Display parking slots
        for slot_number, occupied in slots:
            color = "green" if not occupied else "yellow"
            label = Label(self.parking_slots_frame, text=f"Slot {slot_number}", bg=color, width=20, height=2, borderwidth=2, relief="groove")
            label.grid(row=(slot_number - 1) // 5, column=(slot_number - 1) % 5, padx=5, pady=5)

        # Close SQLite connection
        conn.close()

if __name__ == "__main__":
    detector = LicensePlateDetector()
